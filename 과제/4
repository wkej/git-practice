#include <iostream>
#include <vector>
#include <string>
#include <algorithm>

// PotionRecipe 클래스: 재료 목록과 재고 관리 기능 추가
class PotionRecipe {
public:
    std::string potionName;
    std::vector<std::string> ingredients;
    int stock; // 도전 기능: 재고 수량

    // 생성자: 재료 목록을 받아 초기화하고 초기 재고를 3으로 설정
    PotionRecipe(const std::string& name, const std::vector<std::string>& ingredients)
        : potionName(name), ingredients(ingredients), stock(3) {} // 도전 기능: 초기 재고 3개
};

// AlchemyWorkshop 클래스: 레시피 목록을 관리하고 검색/재고 관리 기능 추가
class AlchemyWorkshop {
private:
    std::vector<PotionRecipe> recipes;

public:
    // addRecipe 메서드: 재료 목록(vector)을 매개변수로 받도록 수정
    void addRecipe(const std::string& name, const std::vector<std::string>& ingredients) {
        recipes.push_back(PotionRecipe(name, ingredients));
        std::cout << ">> 새로운 레시피 '" << name << "'이(가) 추가되었습니다." << std::endl;
        std::cout << ">> 초기 재고 3개가 자동으로 생성되었습니다." << std::endl;
    }

    // 모든 레시피 출력 메서드
    void displayAllRecipes() const {
        if (recipes.empty()) {
            std::cout << "아직 등록된 레시피가 없습니다." << std::endl;
            return;
        }

        std::cout << "\n--- [ 전체 레시피 목록 ] ---" << std::endl;
        for (size_t i = 0; i < recipes.size(); ++i) {
            std::cout << "- 물약 이름: " << recipes[i].potionName << std::endl;
            std::cout << "  > 필요 재료: ";
            
            // 재료 목록을 순회하며 출력
            for (size_t j = 0; j < recipes[i].ingredients.size(); ++j) {
                std::cout << recipes[i].ingredients[j];
                // 마지막 재료가 아니면 쉼표로 구분
                if (j < recipes[i].ingredients.size() - 1) {
                    std::cout << ", ";
                }
            }
            std::cout << std::endl;
            std::cout << "  > 현재 재고: " << recipes[i].stock << "/3" << std::endl;
        }
        std::cout << "---------------------------\n";
    }

    // 필수 기능: 물약 이름으로 검색
    void searchByName(const std::string& name) const {
        bool found = false;
        
        std::cout << "\n--- [ 검색 결과: '" << name << "' ] ---" << std::endl;
        for (const auto& recipe : recipes) {
            if (recipe.potionName == name) {
                std::cout << "- 물약 이름: " << recipe.potionName << std::endl;
                std::cout << "  > 필요 재료: ";
                for (size_t j = 0; j < recipe.ingredients.size(); ++j) {
                    std::cout << recipe.ingredients[j];
                    if (j < recipe.ingredients.size() - 1) {
                        std::cout << ", ";
                    }
                }
                std::cout << std::endl;
                std::cout << "  > 현재 재고: " << recipe.stock << "/3" << std::endl;
                found = true;
                break;
            }
        }
        
        if (!found) {
            std::cout << "해당 이름의 물약을 찾을 수 없습니다." << std::endl;
        }
        std::cout << "---------------------------\n";
    }

    // 필수 기능: 재료로 검색
    void searchByIngredient(const std::string& ingredient) const {
        bool found = false;
        
        std::cout << "\n--- [ '" << ingredient << "'이(가) 포함된 레시피 ] ---" << std::endl;
        for (const auto& recipe : recipes) {
            // 재료 목록에서 해당 재료가 있는지 확인
            auto it = std::find(recipe.ingredients.begin(), recipe.ingredients.end(), ingredient);
            if (it != recipe.ingredients.end()) {
                std::cout << "- 물약 이름: " << recipe.potionName << std::endl;
                std::cout << "  > 필요 재료: ";
                for (size_t j = 0; j < recipe.ingredients.size(); ++j) {
                    std::cout << recipe.ingredients[j];
                    if (j < recipe.ingredients.size() - 1) {
                        std::cout << ", ";
                    }
                }
                std::cout << std::endl;
                std::cout << "  > 현재 재고: " << recipe.stock << "/3" << std::endl;
                found = true;
            }
        }
        
        if (!found) {
            std::cout << "해당 재료가 포함된 레시피를 찾을 수 없습니다." << std::endl;
        }
        std::cout << "---------------------------\n";
    }

    // 도전 기능: 재고 확인
    int getStock(const std::string& name) const {
        for (const auto& recipe : recipes) {
            if (recipe.potionName == name) {
                return recipe.stock;
            }
        }
        return -1; // 찾지 못한 경우
    }

    // 도전 기능: 물약 지급
    bool dispensePotion(const std::string& name) {
        for (auto& recipe : recipes) {
            if (recipe.potionName == name) {
                if (recipe.stock > 0) {
                    recipe.stock--;
                    std::cout << ">> '" << name << "' 물약을 지급했습니다." << std::endl;
                    std::cout << ">> 남은 재고: " << recipe.stock << "/3" << std::endl;
                    return true;
                } else {
                    std::cout << ">> '" << name << "' 물약의 재고가 없습니다!" << std::endl;
                    return false;
                }
            }
        }
        std::cout << ">> 해당 이름의 물약을 찾을 수 없습니다." << std::endl;
        return false;
    }

    // 도전 기능: 공병 반환
    bool returnEmptyBottle(const std::string& name) {
        for (auto& recipe : recipes) {
            if (recipe.potionName == name) {
                if (recipe.stock < 3) {
                    recipe.stock++;
                    std::cout << ">> '" << name << "' 물약의 공병을 반환받았습니다." << std::endl;
                    std::cout << ">> 현재 재고: " << recipe.stock << "/3" << std::endl;
                    return true;
                } else {
                    std::cout << ">> '" << name << "' 물약의 재고가 이미 가득 찼습니다! (최대 3개)" << std::endl;
                    return false;
                }
            }
        }
        std::cout << ">> 해당 이름의 물약을 찾을 수 없습니다." << std::endl;
        return false;
    }
};

int main() {
    AlchemyWorkshop myWorkshop;

    while (true) {
        std::cout << "\n⚗️ 연금술 공방 관리 시스템" << std::endl;
        std::cout << "1. 레시피 추가" << std::endl;
        std::cout << "2. 모든 레시피 출력" << std::endl;
        std::cout << "3. 물약 이름으로 검색" << std::endl;
        std::cout << "4. 재료로 검색" << std::endl;
        std::cout << "5. 물약 지급" << std::endl;
        std::cout << "6. 공병 반환" << std::endl;
        std::cout << "7. 종료" << std::endl;
        std::cout << "선택: ";

        int choice;
        std::cin >> choice;

        if (std::cin.fail()) {
            std::cout << "잘못된 입력입니다. 숫자를 입력해주세요." << std::endl;
            std::cin.clear();
            std::cin.ignore(10000, '\n');
            continue;
        }

        if (choice == 1) {
            // 레시피 추가
            std::string name;
            std::cout << "물약 이름: ";
            std::cin.ignore(10000, '\n');
            std::getline(std::cin, name);

            // 여러 재료를 입력받기 위한 로직
            std::vector<std::string> ingredients_input;
            std::string ingredient;
            std::cout << "필요한 재료들을 입력하세요. (입력 완료 시 '끝' 입력)" << std::endl;
            
            while (true) {
                std::cout << "재료 입력: ";
                std::getline(std::cin, ingredient);
                
                // 사용자가 '끝'을 입력하면 재료 입력 종료
                if (ingredient == "끝") {
                    break;
                }
                ingredients_input.push_back(ingredient);
            }

            // 입력받은 재료가 하나 이상 있을 때만 레시피 추가
            if (!ingredients_input.empty()) {
                 myWorkshop.addRecipe(name, ingredients_input);
            } else {
                std::cout << ">> 재료가 입력되지 않아 레시피 추가를 취소합니다." << std::endl;
            }

        } else if (choice == 2) {
            // 모든 레시피 출력
            myWorkshop.displayAllRecipes();

        } else if (choice == 3) {
            // 물약 이름으로 검색
            std::string searchName;
            std::cout << "검색할 물약 이름: ";
            std::cin.ignore(10000, '\n');
            std::getline(std::cin, searchName);
            myWorkshop.searchByName(searchName);

        } else if (choice == 4) {
            // 재료로 검색
            std::string searchIngredient;
            std::cout << "검색할 재료 이름: ";
            std::cin.ignore(10000, '\n');
            std::getline(std::cin, searchIngredient);
            myWorkshop.searchByIngredient(searchIngredient);

        } else if (choice == 5) {
            // 물약 지급
            std::string potionName;
            std::cout << "지급할 물약 이름: ";
            std::cin.ignore(10000, '\n');
            std::getline(std::cin, potionName);
            myWorkshop.dispensePotion(potionName);

        } else if (choice == 6) {
            // 공병 반환
            std::string potionName;
            std::cout << "반환할 공병의 물약 이름: ";
            std::cin.ignore(10000, '\n');
            std::getline(std::cin, potionName);
            myWorkshop.returnEmptyBottle(potionName);

        } else if (choice == 7) {
            std::cout << "공방 문을 닫습니다..." << std::endl;
            break;

        } else {
            std::cout << "잘못된 선택입니다. 다시 시도하세요." << std::endl;
        }
    }

    return 0;
}
